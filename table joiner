import React, { useState } from 'react';

const Table = ({ children }) => (
  <table className="min-w-full divide-y divide-gray-200">
    {children}
  </table>
);

const TableHead = ({ children }) => (
  <thead className="bg-gray-50">
    <tr>{children}</tr>
  </thead>
);

const TableBody = ({ children }) => (
  <tbody className="bg-white divide-y divide-gray-200">
    {children}
  </tbody>
);

const TableHeader = ({ children }) => (
  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
    {children}
  </th>
);

const TableCell = ({ children }) => (
  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
    {children}
  </td>
);

const TableRow = ({ children }) => (
  <tr>{children}</tr>
);

const Input = ({ value, onChange }) => (
  <input
    type="text"
    className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
    value={value}
    onChange={onChange}
  />
);

const Button = ({ onClick, children }) => (
  <button
    type="button"
    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
    onClick={onClick}
  >
    {children}
  </button>
);

const Select = ({ value, onChange, children }) => (
  <select
    className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
    value={value}
    onChange={onChange}
  >
    {children}
  </select>
);

const JoinVisualizer = () => {
  const [tableA, setTableA] = useState([
    { id: '1', name: 'Alice' },
    { id: '2', name: 'Bob' },
  ]);
  const [tableB, setTableB] = useState([
    { id: '1', order: 'Laptop' },
    { id: '2', order: 'Phone' },
  ]);
  const [joinType, setJoinType] = useState('INNER');
  const [result, setResult] = useState([]);

  const addRow = (table, setTable) => {
    setTable([...table, { id: '', name: '' }]);
  };

  const updateRow = (table, setTable, index, field, value) => {
    const newTable = [...table];
    newTable[index][field] = value;
    setTable(newTable);
  };

  const performJoin = () => {
    let joinResult = [];
    switch (joinType) {
      case 'INNER':
        joinResult = tableA.filter(a => tableB.some(b => b.id === a.id))
          .map(a => ({...a, ...tableB.find(b => b.id === a.id)}));
        break;
      case 'LEFT':
        joinResult = tableA.map(a => ({
          ...a,
          ...(tableB.find(b => b.id === a.id) || { order: null })
        }));
        break;
      case 'RIGHT':
        joinResult = tableB.map(b => ({
          ...(tableA.find(a => a.id === b.id) || { id: b.id, name: null }),
          ...b
        }));
        break;
      case 'FULL':
        joinResult = [
          ...tableA.map(a => ({
            ...a,
            ...(tableB.find(b => b.id === a.id) || { order: null })
          })),
          ...tableB.filter(b => !tableA.some(a => a.id === b.id))
            .map(b => ({ id: b.id, name: null, order: b.order }))
        ];
        break;
      case 'CROSS':
        joinResult = tableA.flatMap(a => tableB.map(b => ({ ...a, ...b })));
        break;
    }
    setResult(joinResult);
  };

  return (
    <div className="p-4 space-y-4">
      <h1 className="text-2xl font-bold">Interactive SQL Join Visualizer</h1>
      
      <div className="flex space-x-4">
        <div className="flex-1">
          <h2 className="text-xl font-semibold">Table A (Users)</h2>
          <Table>
            <TableHead>
              <TableHeader>ID</TableHeader>
              <TableHeader>Name</TableHeader>
            </TableHead>
            <TableBody>
              {tableA.map((row, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Input 
                      value={row.id} 
                      onChange={(e) => updateRow(tableA, setTableA, index, 'id', e.target.value)}
                    />
                  </TableCell>
                  <TableCell>
                    <Input 
                      value={row.name} 
                      onChange={(e) => updateRow(tableA, setTableA, index, 'name', e.target.value)}
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          <Button onClick={() => addRow(tableA, setTableA)}>Add Row</Button>
        </div>
        
        <div className="flex-1">
          <h2 className="text-xl font-semibold">Table B (Orders)</h2>
          <Table>
            <TableHead>
              <TableHeader>ID</TableHeader>
              <TableHeader>Order</TableHeader>
            </TableHead>
            <TableBody>
              {tableB.map((row, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Input 
                      value={row.id} 
                      onChange={(e) => updateRow(tableB, setTableB, index, 'id', e.target.value)}
                    />
                  </TableCell>
                  <TableCell>
                    <Input 
                      value={row.order} 
                      onChange={(e) => updateRow(tableB, setTableB, index, 'order', e.target.value)}
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          <Button onClick={() => addRow(tableB, setTableB)}>Add Row</Button>
        </div>
      </div>

      <div className="flex items-center space-x-4">
        <Select value={joinType} onChange={(e) => setJoinType(e.target.value)}>
          <option value="INNER">INNER JOIN</option>
          <option value="LEFT">LEFT JOIN</option>
          <option value="RIGHT">RIGHT JOIN</option>
          <option value="FULL">FULL OUTER JOIN</option>
          <option value="CROSS">CROSS JOIN</option>
        </Select>
        <Button onClick={performJoin}>Perform Join</Button>
      </div>

      <div>
        <h2 className="text-xl font-semibold">Join Result</h2>
        <Table>
          <TableHead>
            <TableHeader>ID</TableHeader>
            <TableHeader>Name</TableHeader>
            <TableHeader>Order</TableHeader>
          </TableHead>
          <TableBody>
            {result.map((row, index) => (
              <TableRow key={index}>
                <TableCell>{row.id}</TableCell>
                <TableCell>{row.name}</TableCell>
                <TableCell>{row.order}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

export default JoinVisualizer;
